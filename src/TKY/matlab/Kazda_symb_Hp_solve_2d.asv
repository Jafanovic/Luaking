syms R1 R2 R3 R4 C1 C2 Va Vin Vout Vb Ix Ia Ib Ic w s

G1 = 1./R1;
G2 = 1./R2 + s*C1;
G3 = 1./R3;
G4 = 1./R4 + s*C2;

Vin = 1;
%                Vb        ,     Vout, 
A = [ G1 + G2 + G3, -G3         ;       %  Vb
                          -G3,  G3 + G4  ]     %  Vout
x = [Vb; Vout];
b = [Vin*G1; 0];

x = A^-1*b;
pretty(x(2,1))

R1 = 47*10^3;
R2 = 10*10^3;
R3 = 10*10^3;
R4 =   1*10^6;
C1 = 47*10^-9;
C2 = 22*10^-9;

% 3. radek matice A
H = x(2,1)
% Define 's' as transfer function variable
s = tf('s');
% Convert to a string
TFstr = char(H);
% Evaluate the expression: "TF = (s+2)/(s^2+5*s+9)"
eval(['TF = ',TFstr]);

% Poles of dynamic system
P = pole(TF);

figure(1)
options = bodeoptions;
options.FreqUnits = 'Hz';     % or 'rad/second', 'rpm', etc.
options.PhaseUnits = 'deg'; % 'deg' | 'rad'

fstart = 10;
fstop = 1e6;
N = 1e6;
% where frange is the input frequency vector
frange = linspace(fstart,fstop,N);  

[mag,phase,f] = bode(TF,frange,options); % Get Plot Data
mag = squeeze(mag);                                             % Reduce (1x1xN) Matrix To (1xN)
phase= squeeze(phase);

hold on

% fb = bandwidth(TF)
% [mag, phase] = bode(TF, 1000)
% 
% plot(fb,-20, '^r', 'MarkerFaceColor','r')
% mag = squeeze(mag);
grid on;